<?php

namespace App\Controllers;

use App\Controllers\BaseControllers\baseHomeController;
use App\Helps\Funcoes;
use App\Model\Home\Login;
use App\Model\Home\TabelaProdutos;
use App\Model\Home\CadastroUser;

class HomeController extends baseHomeController {

    //Traz a pagina index da home
    public function index() {
        $model = new TabelaProdutos();

        //podera so passar a condição diretamente 
        $codicoes = array("condicao" => "JOIN fornecedor as f ON p.FKFornecedor = f.  codigoFornecedor");
        //Trazer um objeto especifico      
        // $dados['Produtos'] = $model->readChave($codicoes, $campos = "*", $where= "codigoProduto = 1");  
        //Trazer todos objetos
        $dados['Produtos'] = $model->readChave($codicoes, $campos = "*", $where = "");
        $this->service->render('Home/index.phtml', $dados);
    }

    //Traz a pagina index do login
    public function login() {
        $this->service->render('Home/login.phtml');
    }

    //Traz a pagina index de cadastro
    public function cadastroView() {
        $this->service->render('Home/cadastro.phtml');
    }

    // verifica o login para saber se o usuario tem acesso
    public function verificaLogin() {
        $fazerLog = filter_input(INPUT_POST, 'fazerLog');
        if (isset($fazerLog)) {
            $model = new Login();
            if ($model->CheckIsNull(filter_input_array(INPUT_POST, $_POST)) === TRUE) {
                $_SESSION['erro'] = "Preencha todos os campos";
                $this->response->redirect('/index/login')->send();
                exit;
            } elseif ($model->VerificationSal(filter_input_array(INPUT_POST, $_POST)) === FALSE) {
                $_SESSION['erro'] = "Os dados não confere com o cadastrado no banco de dados";
                $this->response->redirect('/index/login')->send();
                exit;
            } else {
                $result = $model->autentication(filter_input_array(INPUT_POST, $_POST));
                if ($result) {
                    $this->response->redirect('/admin')->send();
                } else {
                    $_SESSION['erro'] = "Usuário inválido";
                    $this->response->redirect('/index/login')->send();
                    exit;
                }
            }
        }
    }

    //Faz a verificação nos dados no cadastro e cadastra no banco de dados
    public function cadastra() {
        session_start();
        $model = new CadastroUser();
        $funcoes = new Funcoes();

        if ($model->CheckIsNull(filter_input_array(INPUT_POST, $_POST)) == TRUE) {
            $_SESSION['erro'] = "Por favor digite todos os Campos";
            $this->response->redirect('/index/cadastro')->send();
            exit;
        } elseif ($model->CheckCpf(filter_input_array(INPUT_POST, $_POST)) == TRUE) {
            //verifica se o cpf e valido se nao redireciono para a pagina cadastro com uma sessao de erro
            $_SESSION['erro'] = "Por favor digite um CPF válido!";
            $this->response->redirect('/index/cadastro')->send();
            exit;
        } elseif ($model->CheckRepitaSenha(filter_input_array(INPUT_POST, $_POST))) {
            //Verifica se as senhas conicidem se não volta para pagina de castrados com uma sessao de erro
            $_SESSION['erro'] = "Por favor digite as senhas iguais";
            $this->response->redirect('/index/cadastro')->send();
            exit;
        } elseif ($model->ExitsUser(filter_input_array(INPUT_POST, $_POST))) {
            $_SESSION['erro'] = "Ja Existe os Mesmos Dados Cadastrados no Banco";
            $this->response->redirect('/index/cadastro')->send();
            exit;
        } else {
            $nome = addslashes($_POST['nome']);
            $email = addslashes($_POST['email']);
            $senha = filter_input(INPUT_POST, 'senha', FILTER_SANITIZE_STRING);
            $salt = password_hash($senha, PASSWORD_DEFAULT);
            $cpf = addslashes($_POST['cpf']);
            $dataNasc = addslashes($_POST['dataNasc']);
            $celular = addslashes($_POST['celular']);
            $telefoneFixo = addslashes($_POST['telefoneFixo']);
            $tipoUsuario = 0;

            $cep = addslashes($_POST['cep']);
            $rua = addslashes($_POST['rua']);
            $bairro = addslashes($_POST['bairro']);
            $cidade = $_POST['cidade'];
            $estado = addslashes($_POST['uf']);
            $complemento = addslashes($_POST['complemento']);


            $dados = array(
                "0" =>
                        array(
                            "nomeCliente" => $nome, "email" => $email, "senha" => $funcoes->base64($senha, 2),
                            "salt" => $salt, "cpf" => $cpf, "dataNas" => $dataNasc,
                            "celular" => $celular, "telefoneFixo" => $telefoneFixo, "tipoUsuario" => $tipoUsuario, "dataCadas" => $funcoes->dataAtual(2)
                        ),
                "1" =>
                        array(
                            "cep" => $cep, "rua" => $rua, "bairro" => $bairro, "cidade" => $cidade,
                            "estado" => $estado, "complemento" => $complemento
                        )
                
            );            

           
            if ($model->insertEstrangeiro($dados)) {
                $_SESSION['success'] = "Cadastrado com Sucesso";
                $this->response->redirect('/index/cadastro')->send();
                exit;
            } else {
                $_SESSION['erro'] = "Não foi possivel fazer seu Cadastro por favor entre em contato com email suporte@suport.com";
                $this->response->redirect('/index/cadastro')->send();
                exit;
            }
        }
    }

    //Chama a função de destruição da sessao e redireciona o usuario para a index de login
    public function sair() {
        $model = new Login();
        $model->logout();
        $this->response->redirect('/index')->send();
    }

}

